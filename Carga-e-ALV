*&---------------------------------------------------------------------*
*& Report ZPRODUTO_INSERT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT zproduto_insert.

INCLUDE zproduto_dado.

TABLES: zproduto.

* Para a gravação das rotinas
DATA: it_rotina TYPE STANDARD TABLE OF bdcdata,
      wa_rotina LIKE LINE OF it_rotina.

* Para pegar os dados importados e trata-lós
DATA: it_produto TYPE STANDARD TABLE OF tp_produto,
      it_import  TYPE STANDARD TABLE OF tp_linha,       "Recebe os dados importados
      wa_produto TYPE tp_produto.

* Para chamar o Call Transaction
DATA: opc_call TYPE ctu_params,
      msg_call TYPE STANDARD TABLE OF bdcmsgcoll.

TYPES: tp_rotina LIKE it_rotina.
TYPES: tp_msg_call LIKE msg_call.

* Para a ALV (Relatório)
DATA: it_campo  TYPE TABLE OF slis_fieldcat_alv,
      it_evento TYPE TABLE OF slis_alv_event,
      wa_layout TYPE slis_layout_alv.

DATA: it_dado TYPE TABLE OF dado.

SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.
PARAMETERS: p_carga TYPE c RADIOBUTTON GROUP gb1 DEFAULT 'X',
            p_unico TYPE c RADIOBUTTON GROUP gb1.
SELECTION-SCREEN END OF BLOCK b1.

SELECTION-SCREEN BEGIN OF BLOCK b2 WITH FRAME TITLE TEXT-002.
PARAMETERS: p_arq TYPE string LOWER CASE.  "O Linux é case sensitive para navegação do caminho / Este comando mantém a formatação
SELECTION-SCREEN END OF BLOCK b2.

SELECTION-SCREEN BEGIN OF BLOCK b3 WITH FRAME TITLE TEXT-003.
PARAMETERS: p_cod   TYPE p NO-DISPLAY,
            p_desc  TYPE string,
            p_vl    TYPE p DECIMALS 2,
            p_moeda TYPE string MATCHCODE OBJECT zshmoeda.
SELECTION-SCREEN END OF BLOCK b3.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_arq.
  PERFORM caminho_arq.

START-OF-SELECTION.
  IF p_carga EQ 'X'.
    PERFORM update_dado.
    PERFORM tratar_dado.
    PERFORM rotina_carga.
    PERFORM gravacao USING opc_call msg_call it_rotina.

  ELSEIF p_unico EQ 'X'.
    PERFORM insercao.
  ENDIF.

END-OF-SELECTION.
*&---------------------------------------------------------------------*
*&      Form  INSERCAO
*&---------------------------------------------------------------------*
FORM insercao .
  DATA obj_produto TYPE REF TO produto.

  SELECT SINGLE MAX( codproduto )
  FROM zproduto
  INTO p_cod.

  ADD 1 TO p_cod.

  CREATE OBJECT obj_produto
    EXPORTING
      c_cod     = p_cod
      c_desc    = p_desc
      c_valor   = p_vl
      c_tpmoeda = p_moeda.

  IF sy-subrc EQ 0.
    PERFORM enviar_bd USING obj_produto.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ENVIAR_BD
*&---------------------------------------------------------------------*
FORM enviar_bd  USING    obj_produto TYPE REF TO produto.
  DATA wa_produto TYPE zproduto.
  DATA: v_cod     TYPE p,
        v_desc    TYPE string,
        v_tpmoeda TYPE string.

  obj_produto->getcod( IMPORTING e_cod = v_cod ).
  wa_produto-codproduto = v_cod.

  obj_produto->getdesc( IMPORTING e_desc = v_desc ).
  wa_produto-descproduto = v_desc.

  obj_produto->getvalor( IMPORTING e_valor = wa_produto-vlproduto ).
  obj_produto->gettpmoeda( IMPORTING e_tpmoeda = v_tpmoeda ).
  wa_produto-tpmoeda = v_tpmoeda.

  INSERT INTO zproduto VALUES wa_produto.
  IF sy-subrc EQ 0.
    MESSAGE 'Registro inserido!' TYPE 'I'.
  ELSE.
    MESSAGE 'Erro encontrado!' TYPE 'I'.
  ENDIF.

  CLEAR: v_tpmoeda,v_desc,v_cod,wa_produto, obj_produto.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CAMINHO_ARQ
*&---------------------------------------------------------------------*
FORM caminho_arq .
  DATA: v_arq         TYPE filetable, "Caminho do arquivo com o nome do arquivo selecionado
        v_rc          TYPE i,         "Quantidade de arquivos selecionado (-1 se nenhum)
        v_user_action TYPE i.         "Ação do Usuário quanto a janela (fechou, deu ok...)

  CALL METHOD cl_gui_frontend_services=>file_open_dialog
    EXPORTING
      window_title            = 'Selecione o arquivo de carga'
      multiselection          = abap_false     "Para selecionar somente 1 arquivo por vez.
    CHANGING
      file_table              = v_arq
      rc                      = v_rc
      user_action             = v_user_action
    EXCEPTIONS
      file_open_dialog_failed = 1
      cntl_error              = 2
      error_no_gui            = 3
      not_supported_by_gui    = 4
      OTHERS                  = 5.

  IF sy-subrc EQ 0 AND v_user_action EQ 0.            "Se ocorrer tudo bem e o usuário apertar o botão de "Abrir"
    FIELD-SYMBOLS <fs_linha> LIKE LINE OF v_arq.
    READ TABLE v_arq INDEX v_rc ASSIGNING <fs_linha>. "Pegar o registro na tabela com o caminho e nome do arquivo
    p_arq = <fs_linha>-filename.                      "Passa o valor de volta para o parameter
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  UPDATE_DADO
*&---------------------------------------------------------------------*
FORM update_dado .

  CALL METHOD cl_gui_frontend_services=>gui_upload
    EXPORTING
      filename                = p_arq    "Caminho com o nome do arquivo e o arquivo
      filetype                = 'ASC'
    CHANGING
      data_tab                = it_import  "Cada linha no arquivo é uma linha (em string) na tabela
    EXCEPTIONS
      file_open_error         = 1
      file_read_error         = 2
      no_batch                = 3
      gui_refuse_filetransfer = 4
      invalid_type            = 5
      no_authority            = 6
      unknown_error           = 7
      bad_data_format         = 8
      header_not_allowed      = 9
      separator_not_allowed   = 10
      header_too_long         = 11
      unknown_dp_error        = 12
      access_denied           = 13
      dp_out_of_memory        = 14
      disk_full               = 15
      dp_timeout              = 16
      not_supported_by_gui    = 17
      error_no_gui            = 18
      OTHERS                  = 19.

  IF sy-subrc <> 0.
    MESSAGE 'O arquivo não pode ser importado!' TYPE 'W'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  TRATAR_DADO
*&---------------------------------------------------------------------*
FORM tratar_dado .

  FIELD-SYMBOLS <fs_linha> LIKE LINE OF it_import.

  LOOP AT it_import ASSIGNING <fs_linha>.
    CLEAR wa_produto.

    SPLIT <fs_linha>-vl_linha AT ';'
    INTO wa_produto-desc
         wa_produto-valor
         wa_produto-tpmoeda.

    APPEND wa_produto TO it_produto.
  ENDLOOP.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ROTINA_GENERICA
*&---------------------------------------------------------------------*
FORM rotina_generica  USING inicial TYPE string
                            campo   TYPE string
                            valor   TYPE string .
  CLEAR wa_rotina.

  IF inicial EQ 'X'.              "Se Primeira Linha
    wa_rotina-dynbegin = inicial.
    wa_rotina-program = campo.    "Nome do programa
    wa_rotina-dynpro = valor.     "Nº Tela
  ELSEIF inicial IS INITIAL.
    wa_rotina-fnam = campo.
    wa_rotina-fval = valor.
  ENDIF.

  APPEND wa_rotina TO it_rotina. "Inserir na tabela de rotina.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  ROTINA_CARGA
*&---------------------------------------------------------------------*
FORM rotina_carga .
  CLEAR wa_produto.

* Para cada valor na minha tabela executar o seguinte Perform
  LOOP AT it_produto INTO wa_produto.
    PERFORM rotina_generica USING 'X' 'ZPRODUTO_INSERT' '1000'.
    PERFORM rotina_generica USING ' ' 'BDC_OKCODE'      '=ONLI'.
    PERFORM rotina_generica USING ' ' 'P_UNICO'         'X'.
    PERFORM rotina_generica USING ' ' 'P_DESC'          wa_produto-desc.    "Valores da tabela
    PERFORM rotina_generica USING ' ' 'P_VL'            wa_produto-valor.   "Valores da tabela
    PERFORM rotina_generica USING ' ' 'P_MOEDA'         wa_produto-tpmoeda. "Valores da tabela

    CLEAR wa_produto.
  ENDLOOP.

  "Última ação da tela
  PERFORM rotina_generica USING 'X' 'ZPRODUTO_INSERT' '1000'.
  PERFORM rotina_generica USING ' ' 'BDC_OKCODE'      '/EECAN'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GRAVACAO
*&---------------------------------------------------------------------*
FORM gravacao  USING    opc_call TYPE ctu_params
                        msg_call TYPE tp_msg_call
                        it_rotina TYPE tp_rotina.

  opc_call-dismode = 'E'.  "Não exibir na tela
  opc_call-updmode = 'A'.  "Efetuar update se houver

  CALL TRANSACTION 'ZTPRODUTO_INSERT'
       USING it_rotina
       OPTIONS FROM opc_call
       MESSAGES INTO msg_call.

  IF sy-subrc EQ 0.
    MESSAGE 'Dados gravados com sucesso!' TYPE 'I'.
    PERFORM exibir_lista.   "Lista todos os registros
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  EXIBIR_LISTA
*&---------------------------------------------------------------------*
FORM exibir_lista .
  PERFORM carregar_dado.
  PERFORM montar_campo.
  PERFORM montar_layout.
  PERFORM montar_evento.
  PERFORM chamar_alv.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CARREGAR_DADO
*&---------------------------------------------------------------------*
FORM carregar_dado .

  SELECT codproduto descproduto
         vlproduto tpmoeda
       FROM zproduto
       INTO TABLE it_dado.

  IF it_dado IS INITIAL.
    MESSAGE 'Erro de seleção de dados!' TYPE 'W'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MONTAR_CAMPO
*&---------------------------------------------------------------------*
FORM montar_campo .
  FIELD-SYMBOLS <fs_campo> LIKE LINE OF it_campo.

  APPEND INITIAL LINE TO it_campo ASSIGNING <fs_campo>.
  <fs_campo>-fieldname = 'codproduto'.
  <fs_campo>-tabname = 'it_dado'.
  <fs_campo>-seltext_l = 'Código'.

  APPEND INITIAL LINE TO it_campo ASSIGNING <fs_campo>.
  <fs_campo>-fieldname = 'descproduto'.
  <fs_campo>-tabname = 'it_dado'.
  <fs_campo>-seltext_l = 'Descrição'.

  APPEND INITIAL LINE TO it_campo ASSIGNING <fs_campo>.
  <fs_campo>-fieldname = 'vlproduto'.
  <fs_campo>-tabname = 'it_dado'.
  <fs_campo>-seltext_l = 'Valor'.

  APPEND INITIAL LINE TO it_campo ASSIGNING <fs_campo>.
  <fs_campo>-fieldname = 'tpmoeda'.
  <fs_campo>-tabname = 'it_dado'.
  <fs_campo>-seltext_l = 'Moeda'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MONTAR_LAYOUT
*&---------------------------------------------------------------------*
FORM montar_layout .
  wa_layout-colwidth_optimize = 'X'.
  wa_layout-zebra = 'X'.
  wa_layout-no_vline = 'X'.
  wa_layout-confirmation_prompt = 'X'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MONTAR_EVENTO
*&---------------------------------------------------------------------*
FORM montar_evento .
  DATA: wa_evento LIKE LINE OF it_evento.

  wa_evento-name = 'TOP_OF_PAGE'.
  wa_evento-form = 'MONTA_CABECALHO'.
  APPEND wa_evento TO it_evento.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MONTA_CABECALHO
*&---------------------------------------------------------------------*
FORM monta_cabecalho .
  DATA: it_cabecalho TYPE TABLE OF slis_listheader,
        wa_cabecalho LIKE LINE OF it_cabecalho.

  CLEAR wa_cabecalho.
  wa_cabecalho-typ = 'H'.
  wa_cabecalho-info = 'Hortifrute Curicica'.
  APPEND wa_cabecalho TO it_cabecalho.

  CLEAR wa_cabecalho.
  wa_cabecalho-typ = 'S'.
  wa_cabecalho-info = 'Lista de Produtos no Mercado.'.
  APPEND wa_cabecalho TO it_cabecalho.

  CALL FUNCTION 'REUSE_ALV_COMMENTARY_WRITE'
    EXPORTING
      it_list_commentary = it_cabecalho.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHAMAR_ALV
*&---------------------------------------------------------------------*
FORM chamar_alv .
  DATA prog TYPE sy-repid.
  prog = sy-repid.   "Nome do programa

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
    EXPORTING
      i_callback_program = prog
      is_layout          = wa_layout
      it_fieldcat        = it_campo
      it_events          = it_evento
    TABLES
      t_outtab           = it_dado
    EXCEPTIONS
      program_error      = 1
      OTHERS             = 2.

  IF sy-subrc <> 0.
    MESSAGE 'Não é possível exibir o relatório!' TYPE 'W'.
  ENDIF.

ENDFORM.
